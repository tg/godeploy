#!/usr/bin/ruby
require 'tmpdir'
require 'colorize'
require 'optparse'
require_relative 'builder'
require_relative 'remote'
require_relative 'shell'
require_relative 'platform'

remote_bin_dir = nil
remote_tmp_dir = nil
hosts = []
flags = {}

OptionParser.new do |opts|
  opts.banner = 'Usage: godeploy [options] packages'

  opts.on('-rHOST', '--remote=HOST', 'Remote (SSH) host for deployment') do |host|
    hosts << host
  end

  opts.on('-dDIR', '--remote-dir=DIR', 'Remote directory for deployment') do |dir|
    remote_bin_dir = dir
  end

  opts.on('', '--remote-tmp-dir=DIR', 'Remote temporary directory') do |dir|
    remote_tmp_dir = dir
  end

  opts.on('-pPLATFROM', '--platform=PLATFROM', 'Platform ($GOOS_$GOARCH, e.g. linux_386)') do |p|
    ENV['GOOS'], ENV['GOARCH'] = p.split('_',2)
  end

  opts.on('', '--go-get', 'Use `go get` instead of `go install` for dependencies') do |f|
    flags[:goget] = f
  end
end.parse!

builder = Builder.new(ARGV)

remotes = hosts.map { |h|
  r = Remote.new(h)
  r.dir = remote_bin_dir if remote_bin_dir
  r.tmpdir = remote_tmp_dir if remote_tmp_dir
  r
}

if hosts.empty?
  puts "==> Will deploy nowhere".yellow
else
  puts "==> Checking remotes".cyan
end

# Create directories on remote host and check os/architecture
remotes.each do |remote|
  print "#{remote.hostname}... "
  $stdout.flush

  os, arch = remote.ping
  puts "(#{os} #{arch})"

  goos, goarch = Platform.guess_from_uname(os, arch)
  if !goos
    puts "Unknown OS: #{os}"
    exit 1
  elsif !goarch
    puts "Unknown architecture: #{arch}"
    exit 1
  end

  if (builder.os && builder.os != goos) || (builder.arch && builder.arch != goarch)
    puts "Platform conflict"
    exit 1
  end

  builder.set_platform(goos, goarch)
end

# Fetch and install dependencies.
# This compiles dependencies to $GOPATH/pkg/$GOOS_$GOARCH
puts "==> Installing dependencies".green
builder.install_deps(flags[:goget])

# Build executables in temp dir, then tar it all
puts "==> Building binaries".green
builder.build { |tarfile|
  next if hosts.empty?
  puts "==> Deploying".magenta
  remotes.each do |remote|
    puts remote.hostname
    remote.deploy(tarfile)
  end
}
